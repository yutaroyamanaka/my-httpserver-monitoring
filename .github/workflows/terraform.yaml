name: terraform
on:
  push:
    branches:
      - "main"
  pull_request:
jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - name: load private key
        run: |
          mkdir ~/.ssh/
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/private_key 
      - name: setup aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: terraform setup
        uses: hashicorp/setup-terraform@v2
      - name: terraform format
        id: fmt
        run: terraform fmt -check
      - name: terraform init
        id: init
        run: terraform init
      - name: terraform validate
        id: validate
        run: terraform validate -no-color
      - name: terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          ls ~/.ssh/
          terraform plan -no-color -input=false
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_public_key: ${{ vars.PUBLIC_KEY }}
          TF_VAR_private_key_path: ~/.ssh/private_key
        continue-on-error: true
      - name: update pull request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>\n
            \`\`\`sh\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1 
      - name: terraform apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_public_key: ${{ vars.PUBLIC_KEY }}
          TF_VAR_private_key_path: ~/.ssh/private_key
